// StoreServiceImpl.java - –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
package com.example.deliveryproductservice.service.impl;

import com.example.deliveryproductservice.dto.StoreDto.CreateStoreDto;
import com.example.deliveryproductservice.dto.StoreDto.StoreResponseDto;
import com.example.deliveryproductservice.mapper.StoreMapper;
import com.example.deliveryproductservice.model.Address;
import com.example.deliveryproductservice.model.Store;
import com.example.deliveryproductservice.repository.StoreRepository;
import com.example.deliveryproductservice.service.GeocodingService;
import com.example.deliveryproductservice.service.StorageService;
import com.example.deliveryproductservice.service.StoreService;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;

@RequiredArgsConstructor
@Slf4j
@Service
@Transactional
public class StoreServiceImpl implements StoreService {

    private final StoreRepository storeRepository;
    private final StoreMapper storeMapper;
    private final StorageService storageService;
    private final GeocodingService geocodingService;

    @Override
    public StoreResponseDto createStore(CreateStoreDto createStoreDto, Long ownerId) {
        log.info("Creating new store: {} by user: {}", createStoreDto.getName(), ownerId);

        try {
            // 1. üåç –°–æ–∑–¥–∞–µ–º –∞–¥—Ä–µ—Å —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
            Address storeAddress = createStoreAddress(createStoreDto);
            log.info("üìç Address created with coordinates: [{}, {}]",
                    storeAddress.getLatitude(), storeAddress.getLongitude());

            // 2. üì∏ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            ImageUploadResult imageResult = handleImageUpload(createStoreDto.getImageFile(), "stores");

            // 3. üè™ –°–æ–∑–¥–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å Store
            Store store = buildStoreEntity(createStoreDto, ownerId, storeAddress, imageResult);

            // 4. üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            Store savedStore = storeRepository.save(store);

            log.info("‚úÖ Store created successfully with ID: {} by owner: {}",
                    savedStore.getId(), ownerId);

            // 5. üìä –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è
            logStoreCreationStats(savedStore);

            // 6. üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ–º DTO –æ—Ç–≤–µ—Ç
            return storeMapper.mapToResponseDto(savedStore);

        } catch (Exception e) {
            log.error("‚ùå Error creating store for owner {}: {}", ownerId, e.getMessage(), e);
            throw new RuntimeException("Failed to create store: " + e.getMessage(), e);
        }
    }

    // ================================
    // üõ†Ô∏è –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´
    // ================================

    /**
     * üåç –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ —Å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    private Address createStoreAddress(CreateStoreDto createStoreDto) {
        try {
            log.debug("üîç Creating address with geocoding for: {}",
                    createStoreDto.getAddress().getStreet());

            Address address = geocodingService.createAddressWithCoordinates(createStoreDto.getAddress());

            log.info("üìç Geocoding successful: {} ‚Üí [{}, {}]",
                    address.getFormattedAddress(),
                    address.getLatitude(),
                    address.getLongitude());

            return address;

        } catch (Exception e) {
            log.error("‚ùå Geocoding failed for address: {}",
                    createStoreDto.getAddress().getStreet(), e);
            throw new RuntimeException("Failed to geocode store address: " + e.getMessage(), e);
        }
    }

    /**
     * üì∏ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
     */
    private ImageUploadResult handleImageUpload(MultipartFile imageFile, String folder) {
        if (imageFile == null || imageFile.isEmpty()) {
            log.debug("No image file provided for store");
            return new ImageUploadResult(null, null);
        }

        try {
            log.info("üì∏ Uploading store image: {}", imageFile.getOriginalFilename());

            StorageService.StorageResult storageResult = storageService.uploadImage(imageFile, folder);

            log.info("‚úÖ Store image uploaded successfully: {} with ID: {}",
                    storageResult.getUrl(), storageResult.getImageId());

            return new ImageUploadResult(storageResult.getUrl(), storageResult.getImageId());

        } catch (IOException e) {
            log.error("‚ùå Failed to upload store image: {}", e.getMessage(), e);
            throw new RuntimeException("Failed to upload store image: " + e.getMessage(), e);
        }
    }

    /**
     * üè™ –°–æ–∑–¥–∞–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ Store
     */
    private Store buildStoreEntity(CreateStoreDto dto, Long ownerId, Address address, ImageUploadResult imageResult) {
        log.debug("üî® Building Store entity for owner: {}", ownerId);

        Store store = new Store();

        // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        store.setOwnerId(ownerId);
        store.setName(dto.getName());
        store.setDescription(dto.getDescription());
        store.setAddress(address);

        // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        store.setPhone(dto.getPhone());
        store.setEmail(dto.getEmail());

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
        store.setDeliveryRadius(dto.getDeliveryRadius());
        store.setDeliveryFee(dto.getDeliveryFee());
        store.setEstimatedDeliveryTime(dto.getEstimatedDeliveryTime());

        // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (imageResult.getImageUrl() != null) {
            store.setPicUrl(imageResult.getImageUrl());
            store.setPicId(imageResult.getImageId());
        } else {
            // –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
            store.setPicUrl(getDefaultStoreImageUrl());
            store.setPicId("default_store_image");
        }

        // –°—Ç–∞—Ç—É—Å –∏ —Ä–µ–π—Ç–∏–Ω–≥
        store.setIsActive(dto.getIsActive() != null ? dto.getIsActive() : true);
        // rating –æ—Å—Ç–∞–µ—Ç—Å—è BigDecimal.ZERO –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        log.debug("‚úÖ Store entity built successfully");
        return store;
    }

    /**
     * üñºÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private String getDefaultStoreImageUrl() {
        // –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ—Ä–µ–∑ properties –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Cloudinary
        return "https://via.placeholder.com/800x600/f0f0f0/999999?text=Store+Image";
    }

    /**
     * üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
     */
    private void validateStoreUniqueness(String storeName, Long ownerId) {
        boolean exists = storeRepository.existsByNameAndOwnerIdAndIsActiveTrue(storeName, ownerId);
        if (exists) {
            throw new RuntimeException("Store with name '" + storeName + "' already exists for this owner");
        }
    }

    /**
     * üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è
     */
    private void logStoreCreationStats(Store savedStore) {
        log.info("üìä Store creation stats:");
        log.info("   üè™ Store ID: {}", savedStore.getId());
        log.info("   üë§ Owner ID: {}", savedStore.getOwnerId());
        log.info("   üìç Location: {}", savedStore.getAddress().getFormattedAddress());
        log.info("   üöö Delivery: {}km radius, ${} fee, {} min",
                savedStore.getDeliveryRadius(),
                savedStore.getDeliveryFee(),
                savedStore.getEstimatedDeliveryTime());
        log.info("   üñºÔ∏è Image: {}", savedStore.getPicUrl() != null ? "Yes" : "No");
    }

    // ================================
    // üì¶ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ö–õ–ê–°–°–´
    // ================================

    /**
     * –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    @Getter
    private static class ImageUploadResult {
        private final String imageUrl;
        private final String imageId;

        public ImageUploadResult(String imageUrl, String imageId) {
            this.imageUrl = imageUrl;
            this.imageId = imageId;
        }

    }
}