package com.example.deliveryproductservice.repository;

import com.example.deliveryproductservice.dto.category.CategoryBaseProjection;
import com.example.deliveryproductservice.model.Category;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;

@Repository
public interface CategoryRepository extends JpaRepository<Category, Long> {


    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–æ–ª–Ω—ã–µ Entity)
     */
    List<Category> findByIsActiveTrueOrderBySortOrderAsc();

    /**
     * –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–ø–æ–ª–Ω—ã–µ Entity)
     */
    List<Category> findByNameContainingIgnoreCaseAndIsActiveTrue(String name);

    /**
     * –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É (–ø–æ–ª–Ω—ã–µ Entity)
     */
    List<Category> findByIsActiveOrderBySortOrderAsc(Boolean isActive);

    // ================================
    // üìä –ú–ï–¢–û–î–´ –° –ü–†–û–ï–ö–¶–ò–Ø–ú–ò
    // ================================

    /**
     * üìã –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø—Ä–æ–µ–∫—Ü–∏—è —Å imageUrl)
     */
    @Query("SELECT c.id as id, c.name as name, c.isActive as isActive, " +
            "c.sortOrder as sortOrder, c.imageUrl as imageUrl " +
            "FROM Category c WHERE c.isActive = true ORDER BY c.sortOrder ASC")
    List<CategoryBaseProjection> findActiveCategoriesProjection();

    /**
     * üîç –ù–∞–π—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID (–ø—Ä–æ–µ–∫—Ü–∏—è —Å imageUrl)
     */
    @Query("SELECT c.id as id, c.name as name, c.isActive as isActive, " +
            "c.sortOrder as sortOrder, c.imageUrl as imageUrl " +
            "FROM Category c WHERE c.id = :id")
    Optional<CategoryBaseProjection> findCategoryProjectionById(@Param("id") Long id);

    /**
     * üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–ø—Ä–æ–µ–∫—Ü–∏—è —Å imageUrl)
     */
    @Query("SELECT c.id as id, c.name as name, c.isActive as isActive, " +
            "c.sortOrder as sortOrder, c.imageUrl as imageUrl " +
            "FROM Category c WHERE LOWER(c.name) LIKE LOWER(CONCAT('%', :name, '%')) AND c.isActive = true " +
            "ORDER BY c.sortOrder ASC")
    List<CategoryBaseProjection> searchActiveCategoriesProjection(@Param("name") String name);

    /**
     * üìä –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ (–ø—Ä–æ–µ–∫—Ü–∏—è —Å imageUrl)
     */
    @Query("SELECT c.id as id, c.name as name, c.isActive as isActive, " +
            "c.sortOrder as sortOrder, c.imageUrl as imageUrl " +
            "FROM Category c ORDER BY c.sortOrder ASC, c.name ASC")
    List<CategoryBaseProjection> findAllCategoriesProjection();

    /**
     * üîç –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Å–ø–∏—Å–∫—É ID (–ø—Ä–æ–µ–∫—Ü–∏—è —Å imageUrl)
     */
    @Query("SELECT c.id as id, c.name as name, c.isActive as isActive, " +
            "c.sortOrder as sortOrder, c.imageUrl as imageUrl " +
            "FROM Category c WHERE c.id IN :ids ORDER BY c.sortOrder ASC")
    List<CategoryBaseProjection> findCategoriesProjectionByIds(@Param("ids") List<Long> ids);

    /**
     * üî¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–ø—Ä–æ–µ–∫—Ü–∏—è —Å imageUrl)
     */
    @Query("SELECT c.id as id, c.name as name, c.isActive as isActive, " +
            "c.sortOrder as sortOrder, c.imageUrl as imageUrl " +
            "FROM Category c WHERE c.sortOrder BETWEEN :minOrder AND :maxOrder AND c.isActive = true " +
            "ORDER BY c.sortOrder ASC")
    List<CategoryBaseProjection> findCategoriesProjectionBySortOrderRange(
            @Param("minOrder") Integer minOrder,
            @Param("maxOrder") Integer maxOrder);
    // ================================
    // üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê
    // ================================

    @Query("SELECT c.isActive as isActive, COUNT(c) as categoryCount " +
            "FROM Category c GROUP BY c.isActive")
    List<CategoryStatsProjection> getCategoryStatistics();

    @Query("SELECT COUNT(c) FROM Category c WHERE c.isActive = true")
    Long countActiveCategories();

    @Query("SELECT COUNT(c) > 0 FROM Category c WHERE LOWER(c.name) = LOWER(:name) AND c.isActive = true")
    boolean existsActiveCategoryByName(@Param("name") String name);


    /**
     * –ù–∞–π—Ç–∏ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ) —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ sortOrder
     */
    List<Category> findAllByOrderBySortOrderAsc();

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:

    /**
     * –ù–∞–π—Ç–∏ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
     */
    List<Category> findAllByOrderByCreatedAtDesc();

    /**
     * –ù–∞–π—Ç–∏ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
     */
    List<Category> findAllByOrderByNameAsc();


    // ================================
    // üì¶ –í–õ–û–ñ–ï–ù–ù–´–ï –ò–ù–¢–ï–†–§–ï–ô–°–´ –ü–†–û–ï–ö–¶–ò–ô
    // ================================

    /**
     * –ü—Ä–æ–µ–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    interface CategoryStatsProjection {
        Boolean getIsActive();

        Long getCategoryCount();

        default String getStatusText() {
            return getIsActive() ? "–ê–∫—Ç–∏–≤–Ω—ã–µ" : "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ";
        }
    }


}