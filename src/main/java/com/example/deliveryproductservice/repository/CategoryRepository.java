package com.example.deliveryproductservice.repository;



import com.example.deliveryproductservice.dto.category.CategoryBaseProjection;
import com.example.deliveryproductservice.model.Category;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;


@Repository
public interface CategoryRepository extends JpaRepository<Category, Long> {

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    List<Category> findByIsActiveTrueOrderBySortOrderAsc();

    // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    List<Category> findByNameContainingIgnoreCaseAndIsActiveTrue(String name);

    // –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
    List<Category> findByIsActiveOrderBySortOrderAsc(Boolean isActive);

    /**
     * üìã –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
     */
    List<CategoryBaseProjection> findByIsActiveTrueOrderBySortOrderAscBy();

    /**
     * üîç –ù–∞–π—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID (–∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
     */
    Optional<CategoryBaseProjection> findProjectionById(Long id);


    /**
     * üìä –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ) - –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
     */
    @Query("SELECT c.id as id, c.name as name, c.isActive as isActive, c.sortOrder as sortOrder " +
            "FROM Category c ORDER BY c.sortOrder ASC, c.name ASC")
    List<CategoryBaseProjection> findAllCategoriesBrief();

    /**
     * üîç –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Å–ø–∏—Å–∫—É ID (–∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
     */
    @Query("SELECT c.id as id, c.name as name, c.isActive as isActive, c.sortOrder as sortOrder " +
            "FROM Category c WHERE c.id IN :ids")
    List<CategoryBaseProjection> findCategoriesBriefByIds(@Param("ids") List<Long> ids);

    /**
     * üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    @Query("SELECT c.isActive as isActive, COUNT(c) as count " +
            "FROM Category c GROUP BY c.isActive")
    List<CategoryBaseProjection> getCategoryStats();

    /**
     * üîç –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Å–ø–∏—Å–∫—É ID (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è)
     */
    @Query("SELECT c.id as id, c.name as name, c.isActive as isActive, c.sortOrder as sortOrder " +
            "FROM Category c WHERE c.id IN :ids ORDER BY c.sortOrder ASC")
    List<CategoryBaseProjection> findCategoriesBaseByIds(@Param("ids") List<Long> ids);

}