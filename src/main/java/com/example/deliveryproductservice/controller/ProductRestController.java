package com.example.deliveryproductservice.controller;

import com.example.deliveryproductservice.annotation.CurrentUser;
import com.example.deliveryproductservice.dto.ProductDto.*;
import com.example.deliveryproductservice.service.ProductService;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/products")
@RequiredArgsConstructor
@Slf4j
public class ProductRestController {

    private final ProductService productService;


    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
     * GET /api/products
     */
    @GetMapping
    public ResponseEntity<ProductResponseWrapper> getAllAvailableProducts(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size) {

        log.info("üìã GET /api/products - Getting all available products: page={}, size={}", page, size);

        ProductResponseWrapper response = productService.getAllAvailableProducts(page, size);

        log.info("‚úÖ Found {} products, hasNext: {}", response.getTotalCount(), response.getHasNext());
        return ResponseEntity.ok(response);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
     * GET /api/products/store/{storeId}
     */
    @GetMapping("/store/{storeId}")
    public ResponseEntity<ProductResponseWrapper> getProductsByStore(
            @PathVariable Long storeId,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size) {

        log.info("üè™ GET /api/products/store/{} - Getting products for store: page={}, size={}", storeId, page, size);

        ProductResponseWrapper response = productService.getProductsByStore(storeId, page, size);

        log.info("‚úÖ Found {} products for store {}, hasNext: {}", response.getTotalCount(), storeId, response.getHasNext());
        return ResponseEntity.ok(response);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * GET /api/products/category/{categoryId}
     */
    @GetMapping("/category/{categoryId}")
    public ResponseEntity<ProductResponseWrapper> getProductsByCategory(
            @PathVariable Long categoryId,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size) {

        log.info("üìÇ GET /api/products/category/{} - Getting products for category: page={}, size={}", categoryId, page, size);

        ProductResponseWrapper response = productService.getProductsByCategory(categoryId, page, size);

        log.info("‚úÖ Found {} products for category {}, hasNext: {}", response.getTotalCount(), categoryId, response.getHasNext());
        return ResponseEntity.ok(response);
    }

    /**
     * –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
     * GET /api/products/search?name={name}
     */
    @GetMapping("/search")
    public ResponseEntity<ProductResponseWrapper> searchProductsByName(
            @RequestParam String name,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size) {

        log.info("üîç GET /api/products/search - Searching products by name: '{}', page={}, size={}", name, page, size);

        if (name == null || name.trim().isEmpty()) {
            log.warn("‚ùå Empty search query provided");
            ProductResponseWrapper errorResponse = ProductResponseWrapper.error("Search query cannot be empty");
            return ResponseEntity.badRequest().body(errorResponse);
        }

        ProductResponseWrapper response = productService.searchProductsByName(name.trim(), page, size);

        log.info("‚úÖ Found {} products matching '{}', hasNext: {}", response.getTotalCount(), name, response.getHasNext());
        return ResponseEntity.ok(response);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –º–∞–≥–∞–∑–∏–Ω–∞ (–¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏)
     * GET /api/products/store/{storeId}/brief
     */
    @GetMapping("/store/{storeId}/brief")
    public ResponseEntity<ProductBriefResponseWrapper> getProductsBriefByStore(
            @PathVariable Long storeId,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size) {

        log.info("üìä GET /api/products/store/{}/brief - Getting brief products for store: page={}, size={}", storeId, page, size);

        ProductBriefResponseWrapper response = productService.getProductsBriefByStore(storeId, page, size);

        log.info("‚úÖ Found {} brief products for store {}, hasNext: {}", response.getTotalCount(), storeId, response.getHasNext());
        return ResponseEntity.ok(response);
    }

    // ================================
    // üîç –ü–û–õ–£–ß–ï–ù–ò–ï –û–¢–î–ï–õ–¨–ù–´–• –ü–†–û–î–£–ö–¢–û–í
    // ================================

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID
     * GET /api/products/{id}
     */
    @GetMapping("/{id}")
    public ResponseEntity<SingleProductResponseWrapper> getProductById(@PathVariable Long id) {
        log.info("üîç GET /api/products/{} - Getting product by ID", id);

        SingleProductResponseWrapper response = productService.getProductById(id);

        if (response.getSuccess()) {
            log.info("‚úÖ Product found: {}", response.getProduct().getName());
            return ResponseEntity.ok(response);
        } else {
            log.warn("‚ùå Product not found with ID: {}", id);
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
        }
    }

    // ================================
    // ‚úèÔ∏è –°–û–ó–î–ê–ù–ò–ï –ò –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–†–û–î–£–ö–¢–û–í (BUSINESS ONLY)
    // ================================

    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç (—Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
     * POST /api/products
     * –¢—Ä–µ–±—É–µ—Ç: —Ä–æ–ª—å BUSINESS
     */
    @PostMapping(consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<SingleProductResponseWrapper> createProduct(
            @Valid @ModelAttribute CreateProductDto createProductDto,
            @CurrentUser Long userId,
            HttpServletRequest request) {

        log.info("‚ûï POST /api/products - Creating new product: {} for store: {}", createProductDto.getName(), createProductDto.getStoreId());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        String userEmail = request.getHeader("X-User-Email");
        String userRole = request.getHeader("X-User-Role");

        log.info("üîê Create product request from User: ID={}, Email={}, Role={}", userId, userEmail, userRole);

        if (!"ROLE_BUSINESS".equals(userRole)) {
            log.warn("‚ùå Access denied for user {} with role {}. Required: ROLE_BUSINESS", userId, userRole);
            return ResponseEntity.status(HttpStatus.FORBIDDEN).build();
        }

        try {
            SingleProductResponseWrapper response = productService.createProduct(createProductDto, userId);

            log.info("‚úÖ Product created successfully: {} (ID: {}) by user {}",
                    response.getProduct().getName(), response.getProduct().getId(), userId);

            return ResponseEntity.status(HttpStatus.CREATED).body(response);

        } catch (RuntimeException e) {
            log.error("‚ùå Business error creating product: {}", e.getMessage());

            SingleProductResponseWrapper errorResponse = SingleProductResponseWrapper.builder()
                    .product(null)
                    .success(false)
                    .message(e.getMessage())
                    .timestamp(java.time.LocalDateTime.now())
                    .build();

            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);

        } catch (Exception e) {
            log.error("‚ùå Unexpected error creating product: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç (JSON –≤–µ—Ä—Å–∏—è –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
     * POST /api/products/simple
     * –¢—Ä–µ–±—É–µ—Ç: —Ä–æ–ª—å BUSINESS
     */
    @PostMapping("/simple")
    public ResponseEntity<SingleProductResponseWrapper> createProductSimple(
            @Valid @RequestBody CreateProductDto createProductDto,
            @CurrentUser Long userId,
            HttpServletRequest request) {

        log.info("üõçÔ∏è POST /api/products/simple - Creating new product: {} for store: {}", createProductDto.getName(), createProductDto.getStoreId());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        String userRole = request.getHeader("X-User-Role");

        if (!"ROLE_BUSINESS".equals(userRole)) {
            log.warn("‚ùå Access denied for user {} with role {}. Required: ROLE_BUSINESS", userId, userRole);
            return ResponseEntity.status(HttpStatus.FORBIDDEN).build();
        }

        try {
            SingleProductResponseWrapper response = productService.createProduct(createProductDto, userId);

            log.info("‚úÖ Product created successfully: {} (ID: {}) by user {}",
                    response.getProduct().getName(), response.getProduct().getId(), userId);

            return ResponseEntity.status(HttpStatus.CREATED).body(response);

        } catch (Exception e) {
            log.error("‚ùå Error creating product: {}", e.getMessage(), e);

            SingleProductResponseWrapper errorResponse = SingleProductResponseWrapper.builder()
                    .product(null)
                    .success(false)
                    .message("Failed to create product: " + e.getMessage())
                    .timestamp(java.time.LocalDateTime.now())
                    .build();

            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–¥—É–∫—Ç
     * PUT /api/products/{id}
     * –¢—Ä–µ–±—É–µ—Ç: —Ä–æ–ª—å BUSINESS
     */
    @PutMapping(value = "/{id}", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<SingleProductResponseWrapper> updateProduct(
            @PathVariable Long id,
            @Valid @ModelAttribute CreateProductDto updateProductDto,
            @CurrentUser Long userId,
            HttpServletRequest request) {

        log.info("‚úèÔ∏è PUT /api/products/{} - Updating product", id);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        String userRole = request.getHeader("X-User-Role");

        if (!"ROLE_BUSINESS".equals(userRole)) {
            log.warn("‚ùå Access denied for user {} with role {}", userId, userRole);
            return ResponseEntity.status(HttpStatus.FORBIDDEN).build();
        }

        try {
            SingleProductResponseWrapper response = productService.updateProduct(id, updateProductDto, userId);

            if (response.getSuccess()) {
                log.info("‚úÖ Product updated successfully: {}", response.getProduct().getName());
                return ResponseEntity.ok(response);
            } else {
                log.warn("‚ùå Product not found with ID: {}", id);
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
            }

        } catch (Exception e) {
            log.error("‚ùå Error updating product {}: {}", id, e.getMessage(), e);

            SingleProductResponseWrapper errorResponse = SingleProductResponseWrapper.builder()
                    .product(null)
                    .success(false)
                    .message("Failed to update product: " + e.getMessage())
                    .timestamp(java.time.LocalDateTime.now())
                    .build();

            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }

    // ================================
    // üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –ü–†–û–î–£–ö–¢–û–í (BUSINESS ONLY)
    // ================================

    /**
     * –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
     * DELETE /api/products/{id}
     * –¢—Ä–µ–±—É–µ—Ç: —Ä–æ–ª—å BUSINESS
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteProduct(
            @PathVariable Long id,
            @CurrentUser Long userId,
            HttpServletRequest request) {

        log.info("üóëÔ∏è DELETE /api/products/{} - Deleting product", id);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        String userRole = request.getHeader("X-User-Role");

        if (!"ROLE_BUSINESS".equals(userRole)) {
            log.warn("‚ùå Access denied for user {} with role {}", userId, userRole);
            return ResponseEntity.status(HttpStatus.FORBIDDEN).build();
        }

        try {
            productService.deleteProduct(id, userId);

            log.info("‚úÖ Product {} deleted successfully by user {}", id, userId);
            return ResponseEntity.noContent().build();

        } catch (RuntimeException e) {
            log.warn("‚ùå Product not found with ID: {}", id);
            return ResponseEntity.notFound().build();
        } catch (Exception e) {
            log.error("‚ùå Error deleting product {}: {}", id, e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    /**
     * –ñ–µ—Å—Ç–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
     * DELETE /api/products/{id}/hard
     * –¢—Ä–µ–±—É–µ—Ç: —Ä–æ–ª—å ADMIN
     */
    @DeleteMapping("/{id}/hard")
    public ResponseEntity<Void> hardDeleteProduct(
            @PathVariable Long id,
            @CurrentUser Long userId,
            HttpServletRequest request) {

        log.info("üí• DELETE /api/products/{}/hard - Hard deleting product", id);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        String userRole = request.getHeader("X-User-Role");

        if (!"ROLE_ADMIN".equals(userRole)) {
            log.warn("‚ùå Access denied for user {} with role {}. Required: ROLE_ADMIN", userId, userRole);
            return ResponseEntity.status(HttpStatus.FORBIDDEN).build();
        }

        try {
            productService.hardDeleteProduct(id, userId);

            log.info("‚úÖ Product {} hard deleted successfully by user {}", id, userId);
            return ResponseEntity.noContent().build();

        } catch (RuntimeException e) {
            log.warn("‚ùå Product not found with ID: {}", id);
            return ResponseEntity.notFound().build();
        } catch (Exception e) {
            log.error("‚ùå Error hard deleting product {}: {}", id, e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    // ================================
    // üõ†Ô∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï ENDPOINT'–´
    // ================================

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
     * GET /api/products/health
     */
    @GetMapping("/health")
    public ResponseEntity<String> healthCheck() {
        log.debug("üîß GET /api/products/health - Health check");
        return ResponseEntity.ok("Products service is up and running! üõçÔ∏è");
    }
}