package com.example.deliveryproductservice.controller;

import com.example.deliveryproductservice.annotation.CurrentUser;
import com.example.deliveryproductservice.dto.FavoriteStore.FavoriteStoreApiResponse;
import com.example.deliveryproductservice.dto.FavoriteStore.FavoriteStoreResponseDto;
import com.example.deliveryproductservice.service.FavoriteStoreService;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
@RequiredArgsConstructor
@RestController
@RequestMapping("/api/favorites")
@Slf4j
public class FavoriteStoreController {

    private final FavoriteStoreService favoriteStoreService;

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * GET /api/favorites
     */
    @GetMapping
    public ResponseEntity<FavoriteStoreApiResponse<List<FavoriteStoreResponseDto>>> getMyFavorites(
            @CurrentUser Long userId) {

        log.info("üìã REST: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} (–∏–∑ JWT)", userId);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (userId == null) {
            log.warn("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                    .body(FavoriteStoreApiResponse.error("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"));
        }

        FavoriteStoreApiResponse<List<FavoriteStoreResponseDto>> response =
                favoriteStoreService.getUserFavorites(userId);

        HttpStatus status = response.getSuccess() ? HttpStatus.OK : HttpStatus.BAD_REQUEST;
        return ResponseEntity.status(status).body(response);
    }

    @PostMapping("/stores/{storeId}")
    public ResponseEntity<FavoriteStoreApiResponse<FavoriteStoreResponseDto>> addToFavorites(
            @CurrentUser Long userId,
            @PathVariable Long storeId) {

        log.info("üåü REST: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ {} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} (–∏–∑ JWT)", storeId, userId);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (userId == null) {
            log.warn("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                    .body(FavoriteStoreApiResponse.error("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"));
        }

        FavoriteStoreApiResponse<FavoriteStoreResponseDto> response =
                favoriteStoreService.addToFavorites(userId, storeId);

        HttpStatus status = response.getSuccess() ? HttpStatus.CREATED : HttpStatus.BAD_REQUEST;
        return ResponseEntity.status(status).body(response);
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * DELETE /api/favorites/stores/{storeId}
     */
    @DeleteMapping("/stores/{storeId}")
    public ResponseEntity<FavoriteStoreApiResponse<String>> removeFromFavorites(
            @CurrentUser Long userId,
            @PathVariable Long storeId) {

        log.info("üóëÔ∏è REST: –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ {} –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} (–∏–∑ JWT)", storeId, userId);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (userId == null) {
            log.warn("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                    .body(FavoriteStoreApiResponse.error("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"));
        }

        FavoriteStoreApiResponse<String> response =
                favoriteStoreService.removeFromFavorites(userId, storeId);

        HttpStatus status = response.getSuccess() ? HttpStatus.OK : HttpStatus.NOT_FOUND;
        return ResponseEntity.status(status).body(response);
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * PUT /api/favorites/stores/{storeId}/toggle
     */
    @PutMapping("/stores/{storeId}/toggle")
    public ResponseEntity<FavoriteStoreApiResponse<FavoriteStoreResponseDto>> toggleFavorite(
            @CurrentUser Long userId,
            @PathVariable Long storeId) {

        log.info("üîÑ REST: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} (–∏–∑ JWT)", storeId, userId);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (userId == null) {
            log.warn("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                    .body(FavoriteStoreApiResponse.error("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"));
        }

        FavoriteStoreApiResponse<FavoriteStoreResponseDto> response =
                favoriteStoreService.toggleFavorite(userId, storeId);

        HttpStatus status = response.getSuccess() ? HttpStatus.OK : HttpStatus.BAD_REQUEST;
        return ResponseEntity.status(status).body(response);
    }




    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * GET /api/favorites/active
     */
    @GetMapping("/active")
    public ResponseEntity<FavoriteStoreApiResponse<List<FavoriteStoreResponseDto>>> getMyActiveFavorites(
            @CurrentUser Long userId) {

        log.info("üìã REST: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} (–∏–∑ JWT)", userId);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (userId == null) {
            log.warn("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                    .body(FavoriteStoreApiResponse.error("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"));
        }

        FavoriteStoreApiResponse<List<FavoriteStoreResponseDto>> response =
                favoriteStoreService.getUserActiveFavorites(userId);

        HttpStatus status = response.getSuccess() ? HttpStatus.OK : HttpStatus.BAD_REQUEST;
        return ResponseEntity.status(status).body(response);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º —É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * GET /api/favorites/stores/{storeId}/status
     */
    @GetMapping("/stores/{storeId}/status")
    public ResponseEntity<FavoriteStoreApiResponse<Boolean>> checkMyFavoriteStatus(
            @CurrentUser Long userId,
            @PathVariable Long storeId) {

        log.info("üîç REST: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} (–∏–∑ JWT)", storeId, userId);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (userId == null) {
            log.warn("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                    .body(FavoriteStoreApiResponse.error("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"));
        }

        FavoriteStoreApiResponse<Boolean> response =
                favoriteStoreService.isFavorite(userId, storeId);

        HttpStatus status = response.getSuccess() ? HttpStatus.OK : HttpStatus.BAD_REQUEST;
        return ResponseEntity.status(status).body(response);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * GET /api/favorites/count
     */
    @GetMapping("/count")
    public ResponseEntity<FavoriteStoreApiResponse<Long>> getMyFavoritesCount(
            @CurrentUser Long userId) {

        log.info("üìä REST: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} (–∏–∑ JWT)", userId);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (userId == null) {
            log.warn("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                    .body(FavoriteStoreApiResponse.error("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"));
        }

        FavoriteStoreApiResponse<Long> response =
                favoriteStoreService.getUserFavoritesCount(userId);

        HttpStatus status = response.getSuccess() ? HttpStatus.OK : HttpStatus.BAD_REQUEST;
        return ResponseEntity.status(status).body(response);
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —á–µ—Ä–µ–∑ JSON body
     * POST /api/favorites
     */
    @PostMapping
    public ResponseEntity<FavoriteStoreApiResponse<FavoriteStoreResponseDto>> addToFavoritesWithBody(
            @CurrentUser Long userId,
            @RequestBody AddToFavoriteRequest request) {

        log.info("üåü REST: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ {} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} (–∏–∑ JWT, —á–µ—Ä–µ–∑ body)",
                request.getStoreId(), userId);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (userId == null) {
            log.warn("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                    .body(FavoriteStoreApiResponse.error("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"));
        }

        FavoriteStoreApiResponse<FavoriteStoreResponseDto> response =
                favoriteStoreService.addToFavorites(userId, request.getStoreId());

        HttpStatus status = response.getSuccess() ? HttpStatus.CREATED : HttpStatus.BAD_REQUEST;
        return ResponseEntity.status(status).body(response);
    }

    /**
     * DTO –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
     */
    @Setter
    @Getter
    public static class AddToFavoriteRequest {
        private Long storeId;

        public AddToFavoriteRequest() {}
        public AddToFavoriteRequest(Long storeId) { this.storeId = storeId; }

    }
}