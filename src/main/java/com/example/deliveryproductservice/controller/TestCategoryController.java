// 1. TestCategoryController.java - –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
package com.example.deliveryproductservice.controller;

import com.example.deliveryproductservice.dto.category.CategoryResponseDto;
import com.example.deliveryproductservice.dto.category.CreateCategoryDto;
import com.example.deliveryproductservice.service.CategoryService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.List;

@Controller
@RequestMapping("/test/categories")
@RequiredArgsConstructor
@Slf4j
public class TestCategoryController {

    private final CategoryService categoryService;

    /**
     * üìã –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ñ–æ—Ä–º–æ–π —Å–æ–∑–¥–∞–Ω–∏—è
     */
    @GetMapping
    public String categoryTestPage(Model model) {
        try {
            List<CategoryResponseDto> categories = categoryService.getAllActiveCategories();
            model.addAttribute("categories", categories);
            model.addAttribute("newCategory", new CreateCategoryDto());

            log.info("üìã Loaded {} categories for test page", categories.size());
        } catch (Exception e) {
            log.error("‚ùå Error loading categories: {}", e.getMessage(), e);
            model.addAttribute("error", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: " + e.getMessage());
        }

        return "test-categories";
    }

    /**
     * ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    @PostMapping("/create")
    public String createCategory(
            @RequestParam("name") String name,
            @RequestParam("description") String description,
            @RequestParam("imageFile") MultipartFile imageFile,
            @RequestParam(value = "sortOrder", defaultValue = "0") Integer sortOrder,
            @RequestParam(value = "isActive", defaultValue = "true") Boolean isActive,
            RedirectAttributes redirectAttributes) {

        try {
            CreateCategoryDto dto = new CreateCategoryDto();
            dto.setName(name);
            dto.setDescription(description);
            dto.setImageFile(imageFile.isEmpty() ? null : imageFile);
            dto.setSortOrder(sortOrder);
            dto.setIsActive(isActive);

            // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π userId = 1 (ADMIN)
            CategoryResponseDto created = categoryService.createCategory(dto, 1L);

            log.info("‚úÖ Category created via test form: {}", created.getName());
            redirectAttributes.addFlashAttribute("success",
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è '" + created.getName() + "' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!");

        } catch (Exception e) {
            log.error("‚ùå Error creating category: {}", e.getMessage(), e);
            redirectAttributes.addFlashAttribute("error",
                    "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: " + e.getMessage());
        }

        return "redirect:/test/categories";
    }

    /**
     * üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    @PostMapping("/delete/{id}")
    public String deleteCategory(@PathVariable Long id, RedirectAttributes redirectAttributes) {
        try {
            categoryService.deleteCategory(id, 1L); // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π userId –¥–ª—è —Ç–µ—Å—Ç–∞

            log.info("üóëÔ∏è Category {} deleted via test form", id);
            redirectAttributes.addFlashAttribute("success", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞!");

        } catch (Exception e) {
            log.error("‚ùå Error deleting category {}: {}", id, e.getMessage(), e);
            redirectAttributes.addFlashAttribute("error",
                    "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: " + e.getMessage());
        }

        return "redirect:/test/categories";
    }

    /**
     * üìä API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ JSON (–¥–ª—è AJAX)
     */
    @GetMapping("/api")
    @ResponseBody
    public List<CategoryResponseDto> getCategoriesApi() {
        return categoryService.getAllActiveCategories();
    }
}