package com.example.deliveryproductservice.controller;
import com.example.deliveryproductservice.dto.category.*;
import com.example.deliveryproductservice.repository.CategoryRepository;
import com.example.deliveryproductservice.service.CategoryService;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/categories")
@RequiredArgsConstructor
@Slf4j
public class CategoryRestController {


    private final CategoryService categoryService;


    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID
     * GET /api/categories/{id}/brief
     */
    @GetMapping("/{id}/brief")
    public ResponseEntity<ApiResponse<CategoryBaseProjection>> getCategoryBrief(@PathVariable Long id) {
        log.info("üìä GET /api/categories/{}/brief - Getting brief category", id);

        ApiResponse<CategoryBaseProjection> response = categoryService.getCategoryBrief(id);

        if (response.isSuccess()) {
            log.info("‚úÖ Brief category found: {}", response.getData().getName());
            return ResponseEntity.ok(response);
        } else if (response.getData() == null && !response.isSuccess()) {
            log.warn("‚ùå Category not found with ID: {}", id);
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
        } else {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
     * GET /api/categories
     */
    @GetMapping
    public ResponseEntity<ListApiResponse<CategoryResponseDto>> getAllActiveCategories() {

        ListApiResponse<CategoryResponseDto> response = categoryService.getAllActiveCategories();

        if (response.isSuccess()) {
            return ResponseEntity.ok(response);
        } else {
            log.error("‚ùå Error getting active categories: {}", response.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ (–ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
     * GET /api/categories/all
     * –¢—Ä–µ–±—É–µ—Ç: —Ä–æ–ª—å ADMIN
     */
    @GetMapping("/all")
    public ResponseEntity<ListApiResponse<CategoryResponseDto>> getAllCategories(
            HttpServletRequest request) {

        String userRole = request.getHeader("X-User-Role");
        if (!"ROLE_ADMIN".equals(userRole)) {
            log.warn("‚ùå Access denied for role: {}", userRole);
            return ResponseEntity.status(HttpStatus.FORBIDDEN)
                    .body(ListApiResponse.error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"));
        }
        ListApiResponse<CategoryResponseDto> response = categoryService.getAllCategories();

        if (response.isSuccess()) {
            return ResponseEntity.ok(response);
        } else {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
     * GET /api/categories/search?name=pizza
     */
    @GetMapping("/search")
    public ResponseEntity<ListApiResponse<CategoryResponseDto>> searchCategories(
            @RequestParam String name) {
        if (name == null || name.trim().isEmpty()) {
            return ResponseEntity.badRequest()
                    .body(ListApiResponse.error("–ü–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–∏—Å–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"));
        }
        ListApiResponse<CategoryResponseDto> response = categoryService.searchCategories(name.trim());

        if (response.isSuccess()) {
            return ResponseEntity.ok(response);
        } else {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    // ================================
    // üìä –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–û–í - –ö–†–ê–¢–ö–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø (–ü–†–û–ï–ö–¶–ò–ò)
    // ================================

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–¥–ª—è dropdown/—Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤)
     * GET /api/categories/brief
     */
    @GetMapping("/brief")
    public ResponseEntity<ListApiResponse<CategoryBaseProjection>> getActiveCategoriesBrief() {
        try {
            ListApiResponse<CategoryBaseProjection> response = categoryService.getActiveCategoriesBrief();

            if (response.isSuccess()) {
                return ResponseEntity.ok(response);
            } else {
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
            }
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", e);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ)
     * GET /api/categories/brief/all
     * –¢—Ä–µ–±—É–µ—Ç: —Ä–æ–ª—å ADMIN
     */
    @GetMapping("/brief/all")
    public ResponseEntity<ListApiResponse<CategoryBaseProjection>> getAllCategoriesBrief(
            HttpServletRequest request) {
        String userRole = request.getHeader("X-User-Role");
        if (!"ROLE_ADMIN".equals(userRole)) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN)
                    .body(ListApiResponse.error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"));
        }
        ListApiResponse<CategoryBaseProjection> response = categoryService.getAllCategoriesBrief();

        if (response.isSuccess()) {
            log.info("‚úÖ Found {} total brief categories", response.getTotalCount());
            return ResponseEntity.ok(response);
        } else {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –∫—Ä–∞—Ç–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
     * GET /api/categories/brief/search?name=pizza
     */
    @GetMapping("/brief/search")
    public ResponseEntity<ListApiResponse<CategoryBaseProjection>> searchCategoriesBrief(
            @RequestParam String name) {

        log.info("üîç GET /api/categories/brief/search - Searching brief categories by name: {}", name);

        if (name == null || name.trim().isEmpty()) {
            return ResponseEntity.badRequest()
                    .body(ListApiResponse.error("–ü–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–∏—Å–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"));
        }

        ListApiResponse<CategoryBaseProjection> response = categoryService.searchCategoriesBrief(name.trim());

        if (response.isSuccess()) {
            return ResponseEntity.ok(response);
        } else {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —Å–ø–∏—Å–∫—É ID
     * POST /api/categories/brief/by-ids
     */
    @PostMapping("/brief/by-ids")
    public ResponseEntity<ListApiResponse<CategoryBaseProjection>> getCategoriesBriefByIds(
            @RequestBody List<Long> ids) {

        log.info("üìä POST /api/categories/brief/by-ids - Getting categories by IDs: {}", ids);

        if (ids == null || ids.isEmpty()) {
            return ResponseEntity.badRequest()
                    .body(ListApiResponse.error("–°–ø–∏—Å–æ–∫ ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"));
        }

        ListApiResponse<CategoryBaseProjection> response = categoryService.getCategoriesBriefByIds(ids);

        if (response.isSuccess()) {
            return ResponseEntity.ok(response);
        } else {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    // ================================
    // üîç –ü–û–õ–£–ß–ï–ù–ò–ï –û–¢–î–ï–õ–¨–ù–´–• –ö–ê–¢–ï–ì–û–†–ò–ô
    // ================================

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID (–ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
     * GET /api/categories/{id}
     */
    @GetMapping("/{id}")
    public ResponseEntity<ApiResponse<CategoryResponseDto>> getCategoryById(@PathVariable Long id) {
        log.info("üîç GET /api/categories/{} - Getting category by ID", id);

        ApiResponse<CategoryResponseDto> response = categoryService.getCategoryById(id);

        if (response.isSuccess()) {
            log.info("‚úÖ Category found: {}", response.getData().getName());
            return ResponseEntity.ok(response);
        } else if (response.getData() == null && !response.isSuccess()) {
            log.warn("‚ùå Category not found with ID: {}", id);
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
        } else {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }




// ================================
// ‚úèÔ∏è –°–û–ó–î–ê–ù–ò–ï –ò –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ô (ADMIN ONLY)
// ================================

    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (—Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
     * POST /api/categories
     * –¢—Ä–µ–±—É–µ—Ç: —Ä–æ–ª—å ADMIN
     */
    @PostMapping(consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<ApiResponse<CategoryResponseDto>> createCategory(
            @Valid @ModelAttribute CreateCategoryDto createCategoryDto,
            @RequestHeader("X-User-Id") Long userId,
            HttpServletRequest request) {

        log.info("‚ûï POST /api/categories - Creating new category: {}", createCategoryDto.getName());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        String userEmail = request.getHeader("X-User-Email");
        String userRole = request.getHeader("X-User-Role");

        log.info("üîê Create category request from User: ID={}, Email={}, Role={}",
                userId, userEmail, userRole);

        if (!"ROLE_ADMIN".equals(userRole)) {
            log.warn("‚ùå Access denied for user {} with role {}", userId, userRole);
            return ResponseEntity.status(HttpStatus.FORBIDDEN)
                    .body(ApiResponse.error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"));
        }


        ApiResponse<CategoryResponseDto> response = categoryService.createCategory(createCategoryDto, userId);

        if (response.isSuccess()) {
            log.info("‚úÖ Category created successfully: {} by user {}",
                    response.getData().getName(), userId);
            return ResponseEntity.status(HttpStatus.CREATED).body(response);
        } else {
            log.error("‚ùå Error creating category: {}", response.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
     * PUT /api/categories/{id}
     * –¢—Ä–µ–±—É–µ—Ç: —Ä–æ–ª—å ADMIN
     */
    @PostMapping(value = "/{id}", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<ApiResponse<CategoryResponseDto>> updateCategory(
            @PathVariable Long id,
            @Valid @ModelAttribute CreateCategoryDto updateCategoryDto,
            @RequestHeader("X-User-Id") Long userId,
            HttpServletRequest request) {

        log.info("‚úèÔ∏è PUT /api/categories/{} - Updating category", id);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        String userRole = request.getHeader("X-User-Role");

        if (!"ROLE_ADMIN".equals(userRole)) {
            log.warn("‚ùå Access denied for user {} with role {}", userId, userRole);
            return ResponseEntity.status(HttpStatus.FORBIDDEN)
                    .body(ApiResponse.error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"));
        }

        ApiResponse<CategoryResponseDto> response = categoryService.updateCategory(id, updateCategoryDto, userId);

        if (response.isSuccess()) {
            log.info("‚úÖ Category updated successfully: {}", response.getData().getName());
            return ResponseEntity.ok(response);
        } else if (response.getData() == null && !response.isSuccess()) {
            log.warn("‚ùå Category not found with ID: {}", id);
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
        } else {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);
        }
    }

    // ================================
    // üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ô (ADMIN ONLY)
    // ================================

    @DeleteMapping("/{id}")
    public ResponseEntity<ApiResponse<Void>> deleteCategory(
            @PathVariable Long id,
            @RequestHeader("X-User-Id") Long userId,
            HttpServletRequest request) {

        log.info("üóëÔ∏è DELETE /api/categories/{} - Deleting category", id);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        String userRole = request.getHeader("X-User-Role");

        if (!"ROLE_ADMIN".equals(userRole)) {
            log.warn("‚ùå Access denied for user {} with role {}", userId, userRole);
            return ResponseEntity.status(HttpStatus.FORBIDDEN)
                    .body(ApiResponse.error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"));
        }

        ApiResponse<Void> response = categoryService.deleteCategory(id, userId);

        if (response.isSuccess()) {
            log.info("‚úÖ Category {} deleted successfully by user {}", id, userId);
            return ResponseEntity.ok(response);
        } else if (!response.isSuccess() && response.getMessage().contains("–Ω–µ –Ω–∞–π–¥–µ–Ω–∞")) {
            log.warn("‚ùå Category not found with ID: {}", id);
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
        } else {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }


    @PostMapping("/{id}/toggle")
    public ResponseEntity<ApiResponse<CategoryResponseDto>> toggleCategoryStatus(
            @PathVariable Long id,
            @RequestHeader("X-User-Id") Long userId,
            HttpServletRequest request) {

        log.info("üîÑ PATCH /api/categories/{}/toggle - Toggling category status by user: {}", id, userId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        String userRole = request.getHeader("X-User-Role");

        if (!"ROLE_ADMIN".equals(userRole)) {
            log.warn("‚ùå Access denied for user {} with role {}", userId, userRole);
            return ResponseEntity.status(HttpStatus.FORBIDDEN)
                    .body(ApiResponse.error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"));
        }

        try {
            ApiResponse<CategoryResponseDto> response = categoryService.toggleCategoryStatus(id, userId);

            if (response.isSuccess()) {
                log.info("‚úÖ Category status toggled for ID: {} by user: {}", id, userId);
                return ResponseEntity.ok(response);
            } else if (response.getMessage() != null && response.getMessage().contains("–Ω–µ –Ω–∞–π–¥–µ–Ω–∞")) {
                log.warn("‚ùå Category ID: {} not found", id);
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
            } else {
                log.warn("‚ùå Failed to toggle category status: {}", response.getMessage());
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
            }

        } catch (Exception e) {
            log.error("üí• Error toggling category status for ID: {} by user: {}", id, userId, e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(ApiResponse.error("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"));
        }
    }

    // ================================
    // üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê
    // ================================

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     * GET /api/categories/stats
     */
    @GetMapping("/stats")
    public ResponseEntity<ListApiResponse<CategoryRepository.CategoryStatsProjection>> getCategoryStats() {
        log.info("üìä GET /api/categories/stats - Getting category statistics");

        ListApiResponse<CategoryRepository.CategoryStatsProjection> response = categoryService.getCategoryStats();

        if (response.isSuccess()) {
            log.info("‚úÖ Retrieved category statistics with {} entries", response.getTotalCount());
            return ResponseEntity.ok(response);
        } else {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }



    // ================================
    // üõ†Ô∏è –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ENDPOINT'–´
    // ================================

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     * GET /api/categories/count
     */
    @GetMapping("/count")
    public ResponseEntity<ApiResponse<Long>> getActiveCategoriesCount() {
        log.info("üìä GET /api/categories/count - Getting categories count");

        try {
            Long count = categoryService.getActiveCategoriesCount();
            log.info("‚úÖ Active categories count: {}", count);
            return ResponseEntity.ok(ApiResponse.success(count));
        } catch (Exception e) {
            log.error("‚ùå Error getting categories count", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(ApiResponse.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"));
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∏–º–µ–Ω–∏
     * GET /api/categories/exists?name=pizza
     */
    @GetMapping("/exists")
    public ResponseEntity<ApiResponse<Boolean>> checkCategoryExists(@RequestParam String name) {
        log.info("üîç GET /api/categories/exists - Checking if category exists: {}", name);

        try {
            boolean exists = categoryService.existsActiveCategoryByName(name);
            log.info("‚úÖ Category '{}' exists: {}", name, exists);
            return ResponseEntity.ok(ApiResponse.success(exists));
        } catch (Exception e) {
            log.error("‚ùå Error checking category existence", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(ApiResponse.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"));
        }
    }


    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     * GET /api/categories/health
     */
    @GetMapping("/health")
    public ResponseEntity<ApiResponse<String>> healthCheck() {
        log.debug("üîß GET /api/categories/health - Health check");
        return ResponseEntity.ok(ApiResponse.success("Categories service is up and running! üéâ"));
    }
}